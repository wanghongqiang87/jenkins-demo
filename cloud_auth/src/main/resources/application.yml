
server:
  port: 9009
eureka:
  client:
    serviceUrl:
      defaultZone: http://localhost:8761/eureka/
spring:
  application:
    name: spring-cloud-auth
# REDIS（RedisProperties）
# （普通集群，不使用则不用开启）在群集中执行命令时要遵循的最大重定向数目。
# spring.redis.cluster.max-redirects=
# （普通集群，不使用则不用开启）以逗号分隔的“主机：端口”对列表进行引导。
# spring.redis.cluster.nodes=
# 连接工厂使用的数据库索引。
  redis: 
    database: 0
# 连接URL，将覆盖主机，端口和密码（用户将被忽略），例如：redis://user:password@example.com:6379
#spring.redis.url=redis://root:root123@192.168.31.128:6379
# Redis服务器主机。
    host: 127.0.0.1
# 登录redis服务器的密码。
#  password: ph123456
# 启用SSL支持。
    ssl: false
# 池在给定时间可以分配的最大连接数。使用负值无限制。
    port: 6379
    maxTotal: 20
# 池中“空闲”连接的最大数量。使用负值表示无限数量的空闲连接。
    maxIdle: 20
# 连接分配在池被耗尽时抛出异常之前应该阻塞的最长时间量（以毫秒为单位）。使用负值可以无限期地阻止。
    maxWaitMillis: 10000
# 目标为保持在池中的最小空闲连接数。这个设置只有在正面的情况下才有效果。
    timeOut: 6000
    pool: 
      min-idle: 0
# Redis服务器端口。
# （哨兵模式，不使用则不用开启）Redis服务器的名称。
# spring.redis.sentinel.master=
# （哨兵模式，不使用则不用开启）主机：端口对的逗号分隔列表。 
# spring.redis.sentinel.nodes=
# 以毫秒为单位的连接超时。
  datasource:
    type: com.alibaba.druid.pool.DruidDataSource
    driver-class-name: com.mysql.jdbc.Driver
    #url: jdbc:mysql://127.0.0.1:3306/txlcn-demo?characterEncoding=UTF-8&serverTimezone=UTC
    url: jdbc:mysql://127.0.0.1:3306/test?characterEncoding=UTF-8&serverTimezone=UTC
    username: root
    password: root
    hikari:
      maximum-pool-size: 20